/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.16
 * Generated at: 2024-04-02 08:36:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>User Management</title>\n");
      out.write("    <script>\n");
      out.write("        function getAllUsers() {\n");
      out.write("            fetch('controller.do?action=getall')\n");
      out.write("                .then(response => response.json())\n");
      out.write("                .then(users => {\n");
      out.write("                    const tableBody = document.getElementById('userTableBody');\n");
      out.write("                    tableBody.innerHTML = ''; // Clear existing table rows\n");
      out.write("                    users.forEach(user => {\n");
      out.write("                        const row = document.createElement('tr');\n");
      out.write("                        row.innerHTML = `\n");
      out.write("                            <td>${user.user_id}</td>\n");
      out.write("                            <td>${user.user_name}</td>\n");
      out.write("                        `;\n");
      out.write("                        tableBody.appendChild(row);\n");
      out.write("                    });\n");
      out.write("                })\n");
      out.write("                .catch(error => console.error('Error fetching users:', error));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Fetch all users when the page loads\n");
      out.write("        window.onload = getAllUsers;\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h1>User Management</h1>\n");
      out.write("    \n");
      out.write("    <h2>Insert User</h2>\n");
      out.write("    <form action=\"controller.do\" method=\"POST\">\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"insert\">\n");
      out.write("        <label for=\"user_name\">User name:</label>\n");
      out.write("        <input type=\"text\" id=\"user_name\" name=\"user_name\"><br>\n");
      out.write("        <label for=\"user_password\">Password:</label>\n");
      out.write("        <input type=\"password\" id=\"user_password\" name=\"user_password\"><br>\n");
      out.write("        <input type=\"submit\" value=\"Insert User\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <h2>Delete User</h2>\n");
      out.write("    <form action=\"controller.do\" method=\"POST\">\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"delete\">\n");
      out.write("        <label for=\"user_id_name\">User Name:</label>\n");
      out.write("        <input type=\"text\" id=\"user_id_name\" name=\"user_id_name\"><br>\n");
      out.write("        <input type=\"submit\" value=\"Delete User\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <h2>Update User</h2>\n");
      out.write("    <form action=\"controller.do\" method=\"POST\">\n");
      out.write("        <input type=\"hidden\" name=\"action\" value=\"update\">\n");
      out.write("        <label for=\"user_id_update\">User ID:</label>\n");
      out.write("        <input type=\"text\" id=\"user_id_update\" name=\"user_id_update\"><br>\n");
      out.write("        <label for=\"user_name_update\">New User Name:</label>\n");
      out.write("        <input type=\"text\" id=\"user_name_update\" name=\"user_name_update\"><br>\n");
      out.write("        <label for=\"user_password_update\">New Password:</label>\n");
      out.write("        <input type=\"password\" id=\"user_password_update\" name=\"user_password_update\"><br>\n");
      out.write("        <input type=\"submit\" value=\"Update User\">\n");
      out.write("    </form>\n");
      out.write("<hr>\n");
      out.write("    <h2>All Users</h2>\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <thead>\n");
      out.write("            <tr>\n");
      out.write("                <th>User ID</th>\n");
      out.write("                <th>User Name</th>\n");
      out.write("            </tr>\n");
      out.write("        </thead>\n");
      out.write("        <tbody id=\"userTableBody\">\n");
      out.write("           \n");
      out.write("        </tbody>\n");
      out.write("    </table>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
